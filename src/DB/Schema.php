<?php

namespace Inescoin\DB;

class Schema {
	const DATABASE = [
		'website' => [
			'hash' => 'text',
			'url' => 'text',
			'body' => 'text',
			'ownerAddress' => 'text',
			'ownerPublicKey' => 'text',
			'signature' => 'text',
			'height' => 'integer',
			'transactionHash' => 'text',
		],
		'transfer' => [
			'height' => 'integer',
			'createdAt' => 'integer',
			'fromWalletId' => 'text',
			'toWalletId' => 'text',
			'amount' => 'text',
			'nonce' => 'text',
			'hash' => 'text type UNIQUE',
			'transactionHash' => 'text',
			'reference' => 'text',
		],
		'transferPool' => [
			'createdAt' => 'integer',
			'fromWalletId' => 'text',
			'toWalletId' => 'text',
			'amount' => 'text',
			'nonce' => 'text',
			'hash' => 'text type UNIQUE',
			'transactionHash' => 'text',
			'reference' => 'text',
		],
		'transactionWallet' => [
			'amount' => 'int',
	        'bankHash' => 'text',
	        'configHash' => 'text',
	        'amountWithFee' => 'int',
	        'height' => 'int',
	        'coinbase' => 'boolean',
	        'createdAt' => 'int',
	        'fee' => 'int',
	        'fromWalletId' => 'text',
	        'hash' => 'text type UNIQUE',
	        'publicKey' => 'text',
	        'signature' => 'text',
	        'transfers' => 'text',
	        'toDo' => 'text',
	        'toDoHash' => 'text',
	        'url' => 'text',
	        'urlAction' => 'text',
		],
		'transactionPool' => [
			'fee' => 'text',
			'amount' => 'text',
			'amountWithFee' => 'text',
			'fromWalletId' => 'text',
			'bankHash' => 'text',
	        'coinbase' => 'boolean',
			'hash' => 'text type UNIQUE',
			'configHash' => 'text',
			'toDo' => '',
			'toDoHash' => '',
			'url' => 'text',
	        'urlAction' => 'text',
			'transfers' => 'text',
			'signature' => 'text',
			'publicKey' => 'text',
			'createdAt' => 'integer'
		],
		'todo' => [
			'hash' => 'text',
			'keyName' => 'text',
			'ownerAddress' => 'text',
			'ownerPublicKey' => 'text',
			'command' => 'text',
			'height' => 'integer',
			'amount' => 'text',
			'transactionHash' => 'text',
			'createdAt' => 'text',
		],
		'peer' => [
			'height' => 'integer',
			'topHeight' => 'integer',
			'topCumulativeDifficulty' => 'integer',
			'remoteAddress' => 'text',
			'publicKey' => 'text',
			'host' => 'text',
			'port' => 'integer',
			'rpcHost' => 'text',
			'rpcPort' => 'integer',
			'lastSeen' => 'integer',
			'peersInputStream' => 'integer',
			'peersOutputStream' => 'integer',
			'peersInputStream' => 'integer',
			'peersCount' => 'integer',
		],
		'message' => [
			'height' => 'integer',
			'createdAt' => 'integer',
			'fromWalletId' => 'text',
			'toWalletId' => 'text',
			'hash' => 'text type UNIQUE',
			'publicKey' => 'text',
			'signature' => 'text',
			'message' => 'text',
		],
		'messagePool' => [
			'createdAt' => 'integer',
			'fromWalletId' => 'text',
			'toWalletId' => 'text',
			'hash' => 'text type UNIQUE',
			'publicKey' => 'text',
			'signature' => 'text',
			'message' => 'text',
		],
		'domain' => [
			'hash' => 'text',
			'url' => 'text',
			'ownerAddress' => 'text',
			'ownerPublicKey' => 'text',
			'signature' => 'text',
			'height' => 'integer',
			'heightEnd' => 'integer',
			'transactionHash' => 'text',
		],
		'blockTemp' => [
			'countTotalTransaction' => 'integer',
			'configHash' => 'text',
			'merkleRoot' => 'text',
			'countTransaction' => 'integer',
			'createdAt' => 'integer',
			'data' => 'text',
			//'previousCumulativeDifficulty' => 'integer',
			'cumulativeDifficulty' => 'integer',
			'difficulty' => 'integer',
			'hash' => 'text type UNIQUE',
			'height' => 'integer',
			//'name' => 'text',
			'nonce' => 'text',
			'previousHash' => 'text',
			//'symbol' => 'text',
			//'status' => 'text'
		],
		'block' => [
			'countTotalTransaction' => 'integer',
			'configHash' => 'text',
			'merkleRoot' => 'text',
			'countTransaction' => 'integer',
			'createdAt' => 'integer',
			'data' => 'text',
			//'previousCumulativeDifficulty' => 'integer',
			'cumulativeDifficulty' => 'integer',
			'difficulty' => 'integer',
			'hash' => 'text type UNIQUE',
			'height' => 'integer',
			//'name' => 'text',
			'nonce' => 'text',
			'previousHash' => 'text',
			'hasDomain' => 'boolean',
			//'status' => 'text'
		],
		'bank' => [
			'amount' => 'text',
			'height' => 'integer',
			'address' => 'text type UNIQUE',
			'hash' => 'text type UNIQUE',
			'transactionHash' => 'text',
			'transferHash' => 'text'
		],
	];
}
