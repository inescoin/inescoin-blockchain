#!/usr/bin/env php
<?php

// Copyright 2019 The Inescoin developers.
// - Mounir R'Quiba
// Licensed under the GNU Affero General Public License, version 3.

require __DIR__.'/../../vendor/autoload.php';
require __DIR__ . '/../core/help.php';

use Inescoin\ES\ESBlockchainProvider;
use Inescoin\BlockchainConfig;

$params = getopt('', [
	'prefix::',
	'help::',
]);

$prefix = $params['prefix'] ?? BlockchainConfig::NAME;
$helpMe = array_key_exists('help', $params);

if ($helpMe) {
	die($help['consumer']);
}

$esService = ESBlockchainProvider::getInstance($prefix);

while (true) {
	$todos = $esService->todoService()->all();
	var_dump('Start import...');

	if (!isset($todos['hits']['hits'])) {
		var_dump('Not hits...');

		sleep(5);
	}

	if (isset($todos) && isset($todos['hits']) && isset($todos['hits']['hits'])) {
		foreach ($todos['hits']['hits'] as $todo) {
			$command = (array) json_decode($todo['_source']['command']);
			if (!isset($command['name'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'name\'] not found');
				continue;
			}

			if (!isset($command['action'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'action\'] not found');
				continue;
			}

			if (!isset($command['signature'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'signature\'] not found');
				continue;
			}

			if (!isset($todo['_source']['transactionHash'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'transactionHash\'] not found');
				continue;
			}

			if (!isset($todo['_source']['ownerAddress'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'ownerAddress\'] not found');
				continue;
			}

			if (!isset($todo['_source']['ownerPublicKey'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'ownerPublicKey\'] not found');
				continue;
			}

			if (!isset($todo['_source']['blockHeight'])) {
				var_dump($todo['_source']['hash'] . ' - $command[\'blockHeight\'] not found');
				continue;
			}

			$exec = [
				'hash' => $todo['_source']['hash'],
				'url' => strtolower($command['name']),
				'ownerAddress' => $todo['_source']['ownerAddress'],
				'ownerPublicKey' => $todo['_source']['ownerPublicKey'],
				'signature' => $command['signature'],
				'blockHeight' => $todo['_source']['blockHeight'],
				'transactionHash' => $todo['_source']['transactionHash'],
			];

			if (!isset($command['action'])) {
				var_dump('[ERROR] Actoin not found: ' . $todo['_source']['hash']);
				continue;
			}

			$errorAmount = false;
			if($command['action'] === 'create') {
				switch ($todo['_source']['amount']) {
					case 99999000000:
						$exec['blockHeightEnd'] = $exec['blockHeight'] + 250000;
						break;
					case 199999000000:
						$exec['blockHeightEnd'] = $exec['blockHeight'] + (250000 * 3);
						break;
					case 299999000000:
						$exec['blockHeightEnd'] = $exec['blockHeight'] + (250000 * 6);
						break;

					default:
						$errorAmount = true;
						break;
				}

				if ($errorAmount) {
					var_dump('[ERROR] [create] Bad action amount: ' . $todo['_source']['hash']);
					var_dump($todo['_source']['amount']);
					continue;
				}

				if (!$esService->domainService()->exists($command['name'])) {
					var_dump($esService->domainService()->index($command['name'], $exec));
				} else {
					var_dump('[ERROR] [create] already exists ' . $todo['_id'] . ' - ' . $command['name']);
				}

				var_dump('[SUCCESS] [create] ' . $todo['_id'], $exec);
				$esService->todoService()->delete($todo['_id']);
			}

			if($command['action'] === 'renew') {
				if ($errorAmount) {
					var_dump('[ERROR] [create] Bad action amount: ' . $todo['_source']['hash']);
					continue;
				}

				if (!$esService->domainService()->exists($command['name'])) {
					var_dump('[ERROR] [renew] not found ' . $todo['_id'] . ' - ' . $command['name']);
					continue;
				}

				$website = $esService->domainService()->get($command['name']);
				if (isset($website['error'])) {
					var_dump('[ERROR] Domain not found: ' . $command['name']);
					$esService->todoService()->delete($todo['_id']);
					continue;
				}

				$websiteSource = $website['_source'];


				switch ($todo['_source']['amount']) {
					case 99999000000:
						$exec['blockHeightEnd'] = $websiteSource['blockHeightEnd'] + 250000;
						break;
					case 199999000000:
						$exec['blockHeightEnd'] = $websiteSource['blockHeightEnd'] + (250000 * 3);
						break;
					case 299999000000:
						$exec['blockHeightEnd'] = $websiteSource['blockHeightEnd'] + (250000 * 6);
						break;

					default:
						$errorAmount = true;
						break;
				}

				$upExec = [
					'blockHeightEnd' => $exec['blockHeightEnd'],
				];

				$updateDomain = $esService->domainService()->update($exec['url'], $upExec);
				if (isset($updateDomain['error'])) {
					var_dump('[ERROR] [$updateDomain] : ' . $todo['_source']['hash'] . ' | ' . $updateDomain['error']);
					continue;
				}

				var_dump('[SUCCESS] [renew] ' . $todo['_id'], $upExec);
				$esService->todoService()->delete($todo['_id']);
			}

			if($command['action'] === 'delete') {
				if($todo['_source']['amount'] !== 299999000000) {
					var_dump('[ERROR] [delete] Bad action amount: ' . $todo['_source']['hash']);
					continue;
				}

				$deleteDomain = $esService->domainService()->delete($command['name']);
				if (isset($deleteDomain['error'])) {
					var_dump('[ERROR] [$deleteDomain] : ' . $todo['_source']['hash'] . ' | ' . $deleteDomain['error']);
					continue;
				}

				$deleteWebsite = $esService->websiteService()->delete($command['name']);
				if (isset($deleteWebsite['error'])) {
					var_dump('[ERROR] [$deleteWebsite] : ' . $todo['_source']['hash'] . ' | ' . $deleteWebsite['error']);
					continue;
				}

				var_dump('[SUCCESS] [delete] ' . $todo['_id'], $exec);
				$esService->todoService()->delete($todo['_id']);
			}

			if($command['action'] === 'update') {
				$website = $esService->domainService()->get($command['name']);
				if (isset($website['error'])) {
					var_dump('[ERROR] Domain not found: ' . $command['name']);
					$esService->todoService()->delete($todo['_id']);
				} else {
					$websiteSource = $website['_source'];
					$exec = [
						'hash' => $websiteSource['hash'],
						'url' => strtolower($websiteSource['url']),
						'body' => base64_encode(json_encode($command['data'])),
						'ownerAddress' => $websiteSource['ownerAddress'],
						'ownerPublicKey' => $websiteSource['ownerPublicKey'],
						'signature' => $command['signature'],
						'blockHeight' => $todo['_source']['blockHeight'],
						'transactionHash' => $todo['_source']['transactionHash'],
					];

					if ($esService->websiteService()->exists($websiteSource['url'])) {
						$esService->websiteService()->update($websiteSource['url'], $exec);
					} else {
						$esService->websiteService()->index($websiteSource['url'], $exec);
					}

					var_dump('[SUCCESS] [update] ' . $todo['_id']);
					$esService->todoService()->delete($todo['_id']);
				}
			}
		}
	}

	sleep(10);
}

